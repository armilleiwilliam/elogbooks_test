<?php

namespace Tests\Feature;

use App\Models\Job;
use App\Models\Property;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\ParameterBag;
use Tests\TestCase;

class PropertyJobsTest extends TestCase
{
    use RefreshDatabase;

    private $property;
    private $user;
    private $job;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // store fake data at the beginning of each test
        $this->property = Property::factory()->create([
            "name" => "New Property"
        ]);
        $this->user = User::factory()->create([
            "name" => "Chris Martin",
            'email' => "chris@gmail.com",
            'email_verified_at' => now(),
            'password' => '$2y$10$PV3/lXj2mSoy46ambZeiF.lBsjWzpVbKXcM461tzECqzeGYgzoqLW', // password
            'remember_token' => Str::random(10),
        ]);
        $this->job = Job::factory()->create([
            "summary" => "New job",
            "description" => "I have added a new job",
            "status" => "open",
            "user_id" => $this->user->id,
            "property_id" => $this->property->id
        ]);
    }

    /**
     * Test index page view
     * @return void
     */
    public function test_index()
    {
        $response = $this->get("/property-jobs/");
        $response->assertStatus(200);
        $response->assertViewIs("front.list")
        ->assertSee("Jobs list");
    }

    /**
     * Test withdraw list of jobs
     *
     * @return void
     */
    public function test_list_jobs(): void
    {
        $response = $this->getJson('/property-jobs/jobs-list');
        $response->assertStatus(200)->assertJson([
            "message" => "success",
            "data" => [
                "jobs" => [
                    [
                        "id" => $this->job->id,
                        "summary" => $this->job->summary,
                        "description" => $this->job->description,
                        "status" => "open",
                        "property" => $this->property->name,
                        "created_by" => $this->user->name,
                        "created_at" => $this->job->created_at->format("d/m/Y h:i:s"),
                    ]
                ]
            ]
        ]);
    }

    /**
     * Test store new job
     * @return void
     */
    public function test_store_job(): void
    {
        $job = [
            "summary" => "new summary",
            "description" => "new description",
            "property" => 1,
            "user" => 1
        ];

        $job_expected = [
            "summary" => "new summary",
            "description" => "new description",
            "property_id" => 1,
            "user_id" => 1
        ];

        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($job));
        $response = $this->post('property-jobs/store-job', $job);
        $response->assertStatus(200);
        $this->assertDatabaseHas(
            "jobs", $job_expected
        );
    }

    /**
     * Test retrieve list of properties
     * @return void
     */
    public function test_property_list(): void
    {
        $response = $this->getJson('property-jobs/property-list');
        $response->assertStatus(200)->assertJson([
            "message" => "success",
            "data" => [
                "properties" => [
                    [
                        "name" => $this->property->name,
                        "id" => $this->property->id
                    ]
                ]
            ]
        ]);
    }


    /**
     * Test store new job fails: all fields missing
     * @return void
     */
    public function test_store_job_fields_missing(): void
    {
        $job = [
            "summary" => "",
            "description" => "",
            "property" => "",
            "user" => ""
        ];

        // create a request
        $request = new Request();
        $request->headers->set('content-type', 'application/json');
        $request->setJson(new ParameterBag($job));

        // pass data to post request
        $response = $this->post('property-jobs/store-job', $job);
        $response->assertSessionHasErrors([
            'summary' => "The summary field is required.",
            'description' => "The description field is required.",
            'property' => "The property field is required.",
            'user' => "The user field is required."
        ]);
        $response->assertStatus(302);
    }
}
